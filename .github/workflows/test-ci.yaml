name: test-CI

concurrency:
  group: ci-${{ github.run_id }}
  cancel-in-progress: true

on:
  issue_comment:
    types:
      - created

env:
  CI_USER: cryostat+bot
  CI_REGISTRY: quay.io/cryostat
  CI_OPERATOR_IMG: quay.io/cryostat/cryostat-operator
  CI_BUNDLE_IMG: quay.io/cryostat/cryostat-operator-bundle
  CI_SCORECARD_IMG: quay.io/cryostat/cryostat-operator-scorecard
  CI_PLATFORMS: linux/amd64,linux/arm64
  OPENSUSE_UNOFFICIAL_LIBCONTAINERS_KEY_URL: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04/Release.key"
  OPENSUSE_UNOFFICIAL_LIBCONTAINERS_SOURCE_URL: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/unstable/xUbuntu_22.04"

jobs:
  check-before-test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.repository_owner == 'cryostatio' && github.event.issue.pull_request && startsWith(github.event.comment.body, '/build_test')
    steps:
    - name: Fail if needs-triage label applied 
      if: ${{ contains(github.event.issue.labels.*.name, 'needs-triage') }}
      run: exit 1
    - name: Show warning if permission is denied
      if: |
        !(github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER')
        && (!contains(github.event.issue.labels.*.name, 'safe-to-test') || github.event.issue.user.name != github.event.comment.user.name)
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: |-
          You do not have permission to run the /build_test command. Please ask @cryostatio/reviewers
          to resolve the issue.
    - name: Fail if command permission is denied
      if: |
        !(github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER')
        && (!contains(github.event.issue.labels.*.name, 'safe-to-test') || github.event.issue.user.name != github.event.comment.user.name)
      run: exit 1
    - name: React to comment
      uses: actions/github-script@v4
      with:
        script: |
            const {owner, repo} = context.issue
            github.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "+1",
            });  

  checkout-branch: 
    runs-on: ubuntu-latest
    needs: [check-before-test]
    permissions:
      pull-requests: read
    outputs: 
      PR_head_ref: ${{ fromJSON(steps.comment-branch.outputs.result).ref }}
      PR_num: ${{ fromJSON(steps.comment-branch.outputs.result).num }}
      PR_repo: ${{ fromJSON(steps.comment-branch.outputs.result).repo }}
    steps:
    - uses: actions/github-script@v4
      id: comment-branch
      with:
        script: |
          const result = await github.pulls.get ({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          })
          return { repo: result.data.head.repo.full_name, num: result.data.number, ref: result.data.head.ref }
    
  controller-test:
    runs-on: ubuntu-latest
    needs: [checkout-branch]
    env: 
      ref: ${{ needs.checkout-branch.outputs.PR_head_ref }}
      repo: ${{ needs.checkout-branch.outputs.PR_repo }}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ env.repo }}
        ref: ${{ env.ref }}
    - uses: actions/setup-go@v2
      with:
        go-version: '1.20.*'
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Run controller tests
      run: make test-envtest

  scorecard-test:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: [checkout-branch]
    env:
      ref: ${{ needs.checkout-branch.outputs.PR_head_ref }}
      repo: ${{ needs.checkout-branch.outputs.PR_repo }}
      num: ${{ needs.checkout-branch.outputs.PR_num }}
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ env.repo }}
        ref: ${{ env.ref }}
    - uses: jpkrohling/setup-operator-sdk@v1.1.0
      with:
        operator-sdk-version: v1.28.0
    - name: Install podman v4
      run: |
        echo "deb $OPENSUSE_UNOFFICIAL_LIBCONTAINERS_SOURCE_URL/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list
        curl -fsSL $OPENSUSE_UNOFFICIAL_LIBCONTAINERS_KEY_URL | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_unstable.gpg
        sudo apt update
        sudo apt install podman
    - name: Compute test image tags
      id: compute-tag
      run: |
        prefix="ci"
        if [ -n "${{ env.num }}" ]; then
          prefix="pr-${{ env.num }}"
        fi
        echo "tag=${prefix}-$GITHUB_SHA" >> $GITHUB_OUTPUT
    - name: Build scorecard image for test
      run: |
        CUSTOM_SCORECARD_IMG=ghcr.io/${{ github.repository_owner }}/cryostat-operator-scorecard:${{ steps.compute-tag.outputs.tag }} \
        PLATFORMS=linux/amd64 \
        MANIFEST_PUSH=false \
        make scorecard-build
    - name: Push scorecard image to ghcr.io for test
      id: push-scorecard-to-ghcr
      uses: redhat-actions/push-to-registry@v2
      with:
        image: cryostat-operator-scorecard
        tags: ${{ steps.compute-tag.outputs.tag }}
        registry: ghcr.io/${{ github.repository_owner }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build operator image for test
      run: |
        OPERATOR_IMG=ghcr.io/${{ github.repository_owner }}/cryostat-operator:${{ steps.compute-tag.outputs.tag }} \
        SKIP_TESTS=true \
        make oci-build
    - name: Push operator image to ghcr.io for test
      id: push-operator-to-ghcr
      uses: redhat-actions/push-to-registry@v2
      with:
        image: cryostat-operator
        tags: ${{ steps.compute-tag.outputs.tag }}
        registry: ghcr.io/${{ github.repository_owner }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build bundle image for test
      run: |
        yq -i '.spec.template.spec.imagePullSecrets = [{"name": "registry-key"}]' config/manager/manager.yaml
        OPERATOR_IMG=${{ steps.push-operator-to-ghcr.outputs.registry-path }} \
        BUNDLE_IMG=ghcr.io/${{ github.repository_owner }}/cryostat-operator-bundle:${{ steps.compute-tag.outputs.tag }} \
        make bundle bundle-build
    - name: Push bundle image to ghcr.io for test
      id: push-bundle-to-ghcr
      uses: redhat-actions/push-to-registry@v2
      with:
        image: cryostat-operator-bundle
        tags: ${{ steps.compute-tag.outputs.tag }}
        registry: ghcr.io/${{ github.repository_owner }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Kind cluster
      run: |
        kind create cluster --config=".github/kind-config.yaml" -n ci-${{ github.run_id }}
        # Enabling Ingress
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl rollout status -w deployment/ingress-nginx-controller -n ingress-nginx --timeout 5m
    - name: Install Operator Lifecycle Manager
      run: curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.24.0/install.sh | bash -s v0.24.0
    - name: Install Cert Manager
      run: make cert_manager
    - uses: redhat-actions/podman-login@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        auth_file_path: $HOME/.docker/config.json
    - name: Run scorecard tests
      run: |
        SCORECARD_REGISTRY_SERVER="ghcr.io" \
        SCORECARD_REGISTRY_USERNAME="${{ github.repository_owner }}" \
        SCORECARD_REGISTRY_PASSWORD="${{ secrets.GITHUB_TOKEN }}" \
        BUNDLE_IMG="${{ steps.push-bundle-to-ghcr.outputs.registry-path }}" \
        make test-scorecard
    - name: Clean up Kind cluster 
      run: kind delete cluster -n ci-${{ github.run_id }}
